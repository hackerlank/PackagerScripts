#! /bin/bash

#       Name:    cmake_checker.sh
#       Version: 5
#       License:  GPL v3
#       https://gnu.org/licenses/gpl.html
#
#	This script find dependencies (rpm) from CMakeCache.txt
#	CMakeCache.txt is created after build app from source code and when for build app was used cmake.
#	This is useful for find " BuildRequires: " for .spec file (rpm package build).
#-----------------------
#		$ cmake ..
#		$ make
#-----------------------
#	Script use to analize file from:  ~/src/rpm/BUILD/name_package/build/CMakeCache.txt
#	When you use it script show founded CMakeCache.txt from  ~/src/rpm/BUILD/
#	Made for PCLinuxOS
#
# Dependencies: awk , sed , rpm , find , cat , grep , sort , uniq , rev , rm 
#	Written by: tele


#  ----- How Use ? -----
#  $ ./checkdep.cmakecache




#		Example output:
# Path: /home/gg/src/rpm/BUILD/photoqt-1.3/build/CMakeCache.txt 


# Fouded Build dependencies:
# BuildRequires:  binutils
# BuildRequires:  gcc
# BuildRequires:  gcc-c++
# BuildRequires:  GraphicsMagick-devel
# BuildRequires:  %{_lib}qt5core-devel
# BuildRequires:  %{_lib}qt5gui-devel
# BuildRequires:  %{_lib}qt5network-devel
# BuildRequires:  %{_lib}qt5qml-devel
# BuildRequires:  %{_lib}qt5quick-devel
# BuildRequires:  %{_lib}qt5sql-devel
# BuildRequires:  %{_lib}qt5svg-devel
# BuildRequires:  %{_lib}qt5widgets-devel
# BuildRequires:  make

#========================================================================================================





VERBOSE=0



#----------- Menu -------------------------------------------------------{
 for i in $*
do
   case $i in
       --debug|-d)
			VERBOSE=1
			echo "Debug ON"
       ;;
       --help)
			echo "-------------------------------------------------------"
			echo "usage: $0 --debug"
			echo "-------------------------------------------------------"
			echo "--debug: verbose output for debugging"
			echo "--help: show options"
			echo " "
			echo "      This script find BuildRequires dependencies from "
			echo -e "   BUILD folder if you used cmake for build app. \n"
       exit
       ;;
       *)
			# unknown option
			echo "Error: unknown option"
			echo "usage: $0 --help"
       exit
       ;;
   esac
done
#----------- Menu -------------------------------------------------------}




# check which user I am
aa=$(whoami)




# don't use root account
if echo $aa | grep -q "root"
	then
		echo "Please don't use root auccount for this script. ! "
		echo "I suggest use plain user account."
		exit
fi




# find  CMakeCache.txt files
ab=$(find /home/$aa/src/rpm/BUILD -name CMakeCache.txt)











# count lines
# problem is "wc" and "echo" not cooperate together,

# "  ' echo  ' 
#  A text line by definition ends with a newline.
# This has been standardized to prevent different implementations from
# implementing it differently and creating portability problems.
# Therefore all standards compliant implementations must implement it in
# the same way to prevent portability problems. "

# example:
#
#	$ a="j" ; echo  "$a"  |  wc -l
#	1
#
#	$ a="" ; echo  "$a"  |  wc -l
#	1
#
#	$ a="" ; echo -n "$a"  |  wc -l
#	0
#
#	$ a="j" ; echo -n "$a"  |  wc -l
#	0


# count lines ( this count will work )
ac=$(echo "$ab" | sed '/^\s*$/d' | wc -l)
 




#---------------------------------------------{
# check how much lines is and choose
if [ "$ac" = "1" ]
		then
			echo "1 line result - ok" 
elif  [ "$ac" -lt "1" ]
		then
			echo "CMakeCache.txt not found inside BUILD folder."
			exit 1
else 
			echo "Too many CMakeCache.txt found." 
			echo "$ab" | nl
			echo " "
			echo -e "Choose line, from which we will check dependencies \n"
			echo -e "\n I suggest choose someting like: \n /home/user_name/src/rpm/BUILD/app_name/build/CMakeCache.txt \n"
			read line
			echo "You choose line $line :"
			ad=$(echo "$ab" | awk 'NR=="'"$line"'"')
			echo "$ad"
			echo " "

			if [ -z $ac ]
				then
					echo "Sorry but probably you choose wrong line."
					exit 1
			fi
			
			# confirm $ab, path CMakeCache.txt
			ab=$ad

fi
#---------------------------------------------}



# for debug
echo "$ab - ab"





#--------{
# Check - if folder exist remove and create new folder, this will temorary folder.
if [ -d ~/tmp/CheckCmakecache ]
then
	rm -fvr ~/tmp/CheckCmakecache
	mkdir ~/tmp/CheckCmakecache
else
	mkdir ~/tmp/CheckCmakecache
fi
#--------}








#----------------------------{
# parse CMakeCache.txt
cat $ab | grep "DIR:PATH=/" | grep -v "CMAKE_INSTALL" | cut -d "=" -f2 > ~/tmp/CheckCmakecache/1.dir.cmakecache.list


cat $ab | grep "FILEPATH=/" | grep -v "CMAKE_INSTALL" | cut -d "=" -f2 > ~/tmp/CheckCmakecache/1.file.cmakecache.list
#----------------------------}






#-------- check 1.dir.cmakecache.list ----------------------------------------------------------------{

# count lines
ae=$(cat ~/tmp/CheckCmakecache/1.dir.cmakecache.list | wc -l) 




#--------------------------------------------------------------------{
# check if file is empty
if [ -z $ae ]
then
	echo "Sorry but in .../tmp/1.dir.cmakecache.list not exist dependencies."
	variable1=0
else




# Loop ---------------------------------------------------
for i in `seq 1 $ae`
do
       echo "Loop nr: $i / $ae 1.dir.listBuildRequires"


       # af=line $i from 1.dir.listBuildRequires file
       af=$(awk 'NR=='$i  ~/tmp/CheckCmakecache/1.dir.cmakecache.list)



		echo "$af - af" 



#        Exceptions:
#        This paths provide filesystem-2.1.9-1pclos2009
		if [ $af = /etc ]; then
           echo ""
		elif [ $af = /usr/include ]; then
           echo ""
		elif [ $af = /usr/lib ]; then
           echo ""
		elif [ $af = /usr/lib64 ]; then
			echo ""
		else



           # ag = find name package from path, and redirect errors to standard output
           ag=$(rpm -q --whatprovides $af 2>&1)


			#  if echo $ag | grep -q "is not owned by any package"
			if [ $? -ne 0 ]
            then
					echo "-------------------" >> ~/tmp/CheckCmakecache/Errors.log 
                    echo "Not found package." 
                    echo "Not found package, used line $i in 1.dir.cmakecache.list ." >> ~/tmp/CheckCmakecache/Errors.log
					echo "rpm -q --whatprovides $af" >> ~/tmp/CheckCmakecache/Errors.log 
					echo "$ag"    >> ~/tmp/CheckCmakecache/Errors.log 
					echo "-------------------" >> ~/tmp/CheckCmakecache/Errors.log 
					# rpm -qf path
            else
					# founded rpm
					echo "$ag" >> ~/tmp/CheckCmakecache/2.rpm.list
       
            fi

		fi     
done
# End Loop ---------------------------------------------------

fi
#---------- check 1.dir.cmakecache ------------------------------------}










#---------- check 1.file.cmakecache -----------------------------------------{

# count lines
ah=$(cat ~/tmp/CheckCmakecache/1.file.cmakecache.list | wc -l) 


if [ -z $ah ]
then
	echo "Sorry but in .../tmp/1.file.cmakecache.list not exist dependencies."
	variable1=0
else
	# Loop ----------------------
	for i in `seq 1 $ah`
	do
		echo "Loop nr: $i / $ah 1.file.listBuildRequires"


		# af=line $i from 1.file.listBuildRequires file
		aj=$(awk 'NR=='$i  ~/tmp/CheckCmakecache/1.file.cmakecache.list)


		# debug
		echo "$aj - aj" 


		#    Exceptions:
		#    This paths provide filesystem-2.1.9-1pclos2009
		if [ $aj = /etc ]; then
           echo ""
		elif [ $aj = /usr/include ]; then
           echo ""
		elif [ $aj = /usr/lib ]; then
           echo ""
		elif [ $aj = /usr/lib64 ]; then
			echo ""
		else
			# ag = find name package from path, and redirect errors to standard output
			ak=$(rpm -q --whatprovides $aj 2>&1)


			#  if  $ak  "is not owned by any package"
			if [ $? -ne 0 ]
            then
					echo "-------------------" >> ~/tmp/CheckCmakecache/Errors.log 
                    echo "Not found package." 
                    echo "Not found package, line $i in 1.file.cmakecache.list ." >> ~/tmp/CheckCmakecache/Errors.log
					echo "rpm -q --whatprovides $aj" >> ~/tmp/CheckCmakecache/Errors.log 
					echo "$ak"    >> ~/tmp/CheckCmakecache/Errors.log 
					echo "-------------------" >> ~/tmp/CheckCmakecache/Errors.log 
					# rpm -qf path
            else
					# founded rpm
					echo "$ak" >> ~/tmp/CheckCmakecache/2.rpm.list
       
            fi
		fi
	done

fi
#---------- check 1.file.cmakecache ------------------------------------------{







#-----------------------------{
if [ "$VERBOSE" = 0 ]; then
		# this clean terminal
		printf "\ec"
fi
#-----------------------------}








# output to terminal
echo -e "\n Path: $ab \n"
echo -e "\nFouded Build dependencies:"
cat ~/tmp/CheckCmakecache/2.rpm.list | sort | uniq | rev | cut -d"-" -f 3- | rev | awk '{printf "BuildRequires:  " $1 "\n" }' | sed -e 's/lib64/%{_lib}/g'







#-----------------------------------------------------{
if [ -f ~/tmp/CheckCmakecache/Errors.log ]
then
	if [ "$VERBOSE" = 0 ]; then
    	echo -e "\n Some script problems found \n run \n checkdep.cmakecache --debug \n option to see errors. \n"
	else
		echo -e "\n Some script problems found. "
		echo -e "Now you can read errors in  ~/tmp/CheckCmakecache/Errors.log \n"
	fi
fi
#------------------------------------------------------}







#-- Clean files -------------------------{
if [ "$VERBOSE" = 0 ]; then
		# Clean files
		#echo " Delete temporary files."
		rm -frv  ~/tmp/CheckCmakecache > /dev/null	
fi
#-- Clean files ------------------------}





